//Problem #1

// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

// Find the sum of all the multiples of 3 or 5 below 1000.


var multiplesThreeFive = function(num) {
  var threes = Math.floor(num/3);
  var fives = Math.floor(num/5);
  var sum = 0;

  for(var i = 1; i<=threes;i++){
    sum += 3*i;
  }

  for(var j = 1; j<=fives;j++){
    if(5*i%3 !== 0){
      sum += 5*j;
    }
  }
  return sum;
};

//Problem #2

// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

var evenFiboSum = function(){
  var temp,
      num1 = 1,
      num2 = 2,
      sum = 2,
      counter = 1;

  while (num2 < 4000000){
    temp = num2;
    num2 = num1+num2;
    num1 = temp;
    if(counter%3 === 0){
      sum+=num2
      console.log(num2);
    }
    counter++;
  }
  return sum;
}

/*
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
*/

function _fillStorage(storage, k, n){
  while(k<Math.sqrt(n)){
    storage[k] = true;
    k+=k;
  }
}

function _takeoutAllK(n,k){
  while((n/k)%1 ===0){
    n=n/k;
  }
  return n;
}

function largestPrimeFactor(n){
  var _storage = {};
  var k = 2; //set k to the first prime

  while(k<Math.sqrt(n)){
    debugger
    //n = divide n by k until no more k
    n = _takeoutAllK(n,k);
    //fill storage with multiples of k
    _fillStorage(_storage, k, n);
    //find next k
    var found = false;
    while(!found){
      k++;
      if(!_storage.hasOwnProperty[k]){
        found = true;
        console.log(k + "is a prime");
      }
    }
  }
  console.log(_storage);
}

/*Problem 4
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.

Find the largest palindrome made from the product of two 3-digit numbers.
*/

var isPalindrome = function(num) {
  var chars = (num+'').split('');
  for(var i = 0; i < Math.floor(chars.length/2); i++){
    if(chars[i]!==chars[chars.length-1-i]){
      return false
    }
  }
  return true;
};

var findPalindrom = function() {
  //produce single array with numbers 999-900
  var numbers = [];
  var max = 0;
  
  for(var i = 999; i >=900; i--){
    numbers.push(i);
  }
  while(numbers.length > 50){
    for(var i = 0; i<numbers.length; i++){
      //test to see if the multiple is a palindrome
      if(isPalindrome(numbers[0]*numbers[i])){
        max = Math.max(max, numbers[0]*numbers[i])
      }
    }
    numbers.shift();
  }
  //loop through the array with the first number multiplying the rest
  return max;
}; 